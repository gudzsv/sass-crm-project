@use 'sass:map';
@use 'sass:math';
@use 'variables' as var;

@function get-color($color) {
	@if map.has-key(var.$colors, $color) {
		@return map.get(var.$colors, $color);
	}

	@else {
		@warn "Color `#{$color}` not found in the color map.";
		@return null;
	}
}

@function decimal-round($number, $digits: 0, $mode: round) {
	$n: 1;

	// $number must be a number
	@if type-of($number) !=number {
		@warn '#{ $number } is not a number.';
		@return $number;
	}

	// $digits must be a unitless number
	@if type-of($digits) !=number {
		@warn '#{ $digits } is not a number.';
		@return $number;
	}

	@else if not unitless($digits) {
		@warn '#{ $digits } has a unit.';
		@return $number;
	}

	@if $digits >0 {
		@for $i from 1 through $digits {
			$n: $n * 10;
		}
	}

	@if $mode ==round {
		@return math.div(math.round($number * $n), $n);
	}

	@else if $mode ==ceil {
		@return math.div(math.ceil($number * $n), $n);
	}

	@else if $mode ==floor {
		@return math.div(math.floor($number * $n), $n);
	}

	@else {
		@warn '#{ $mode } is undefined keyword.';
		@return $number;
	}
}

@function strip-unit($value) {
	@if type-of($value) !="number" {
		@warn "#{$value} is not a number.";
	}

	@if type-of($value)=="number" and not unitless($value) {
		@return math.div($value, ($value * 0 + 1));
	}

	@return $value;
}

@function px-to-rem($px-value, $base-font-size: 16px) {
	@return #{math.div(strip-unit($px-value), strip-unit($base-font-size))}rem;
}

@function px-to-em($px-value, $base-font-size: 16px) {
	@return #{math.div(strip-unit($px-value), strip-unit($base-font-size))}em;
}
