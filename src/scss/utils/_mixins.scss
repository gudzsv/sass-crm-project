@use 'sass:map';
@use 'sass:list';

@use 'variables' as var;
@use 'functions' as fn;


@mixin mq($bp: sm, $type: min, $is-retina: false) {
	@if map.has-key(var.$breakpoints, $bp) {
		$width: map.get(var.$breakpoints, $bp);

		@if $type ==max {
			$width: $width - 0.02px;
		}

		@media only screen and (#{$type}-width: $width) {
			@if $is-retina {

				@media (min-device-pixel-ratio: 2),
				(min-resolution: 192dpi),
				(min-resolution: 2dppx) {
					@content;
				}
			}

			@else {
				@content;
			}
		}
	}

	@else {
		@warn "Breakpoint `#{$bp}` not found in the breakpoint map.";
	}
}


@mixin frame($width, $heigth: $width, $is-circle: false) {
	width: $width;
	height: $heigth;

	@if $is-circle {
		border-radius: 50%;
		overflow: hidden;
	}

	img {
		object-fit: cover;
		object-position: top center;
	}
}


@mixin scroll-bar {
	&::-webkit-scrollbar {
		width: 14px;
	}

	&::-webkit-scrollbar-track {

		$scrollbar-hover-color: rgba(#fff, 0, 3);

		background-color: fn.get-color('transparent');
		border-radius: 100px;

		&:hover {
			background-color: $scrollbar-hover-color;
		}
	}

	&::-webkit-scrollbar-thumb {
		background-color: fn.get-color('light-secondary');
		background-clip: content-box;
		border: 5px solid fn.get-color('transparent');
		border-radius: 100px;

		&:hover {
			background-color: fn.get-color('accent-primary');
		}
	}
}


@mixin ease($ease, $properties...) {
	@if map.has-key(var.$easings, $ease) {
		$sease: map.get(var.$easings, $ease);
		transition: $sease;
	}

	@else {
		@warn "Easing `#{$ease}` not found in the easing map.";
	}

	@if list.length($properties)>0 {
		transition-property: $properties;
	}
}

@mixin fonts($fs, $fw: null, $lh: null, $ls: null, $align: null) {
	@if $fs {
		font-size: $fs;
	}

	@if $fw {
		font-weight: $fw;
	}

	@if $lh {
		@if $lh ==normal {
			line-height: normal;
		}

		@else {
			$lh: calc(strip-unit($lh) / strip-unit($fs));
			line-height: decimal-round($lh, 2);
		}
	}

	@if $ls {
		@if $ls ==normal {
			letter-spacing: normal;
		}

		@else {
			$ls: calc(strip-unit($ls) / strip-unit($fs));
			letter-spacing: #{decimal-round($ls, 2)}em;
		}
	}

	@if $align {
		text-align: $align;
	}
}
